namespace rapp
{
namespace cloud
{

template <class impl_type, class return_type>
cloud_base<impl_type,return_type>::cloud_base(bool single)
: single_callable(single)
{}
 
template <class impl_type, class return_type>
bool cloud_base<impl_type,return_type>::is_single_callable() const
{
    return single_callable;
}

template <class impl_type, class return_type>
std::string cloud_base<impl_type,return_type>::make_http_uri(std::string uri) const
{
    return "POST /" + uri + " HTTP/1.1\r\n";
}

template <class impl_type, class return_type>
return_type cloud_base<impl_type,return_type>::process(std::string json)
{
    return static_cast<impl_type *>(this)->delegate_(
            rapp::cloud::deserialize<impl_type,return_type>()(json));
}

}
}
